var crypto = require('crypto');

exports.tables = {};
exports.cache = {};

var Cache = function(){

};

Cache.prototype.create = function( name, key ){
	exports.tables[ name  ] = { rows: [], index: {}, indexLookup:[], hasIndex: false, keys:{}, key: ( key ? key : false ) };
};

Cache.prototype.insert = function( name, item ){
	this._insertItem( exports.tables[ name ], item );
};

Cache.prototype.batch = function( name, item ){

	var table = exports.tables[ name ];

	if( table.key === false ) {

		table.rows = table.rows.concat( item );

	} else {

		var itemLength = item.length;

		for( var i = 0; i < itemLength; i++ ) {
			this._insertItem( table, item[i] );
		}
	}
};

Cache.prototype.index = function( tableName, condition ){
		
	var table = exports.tables[ tableName  ],
		rows = table.rows,
		rowLength = rows.length,
		index = [],
		filtered;

	if( typeof condition === "function" ) {
	
		var indexName = this._indexHash( condition );
				
		for( var i = 0; i < rowLength; i++ ) {
		
			filtered = condition( rows[i] );

			if( typeof filtered === 'object' ) {
			
				index.push( filtered );
				
			} else if( filtered ) {
			
				index.push( i );
			}
		}

		table.index[ indexName ] = { items: index, condition: condition };
		table.hasIndex = true;
		
		table.indexLookup = Object.keys( table.index );
	}
};

Cache.prototype.delete = function ( tableName, condition ) {

	if( typeof condition === "function" && exports.tables[ tableName ] !== undefined ) {
	
		var table = exports.tables[ tableName ]
			rows = exports.tables[ tableName ].rows,
			index = table.index,
			indexLength = table.indexLookup.length,
			out = [],
			indexName = this._indexHash( condition ),
			rowLength = rows.length;

		for( var i = 0; i < rowLength; i++ ) {	
			if( !condition( rows[i] ) ) {
				out.push( rows[i] );
			}
		}
		
		exports.tables[ tableName ].rows = out;
				
		// Update index
		for( var i = 0; i < indexLength; i++ ) {
			if( index[ indexName ] !== undefined ) {					
				index[ table.indexLookup[i] ].items = [];
			} else {
				this.index( tableName, index[ table.indexLookup[i] ].condition );
			}
		}

	} else {
	
		if( typeof table === 'string' || typeof table === 'number' ) {
			table = crypto.createHash('md5').update( table ).digest('hex');
			delete exports.cache[ table ];		
		}
	}	
};


Cache.prototype.select = function( name, condition, sort ){

	var table = exports.tables[ name  ];
		index = table.index,
		rows = table.rows,
		rowLength = rows.length,
		out = [],
		indexName = "",
		filtered;
		
	if( typeof condition === "function" ) {
	
		indexName = this._indexHash( condition );
			
		if( index[ indexName ] !== undefined ) {
		
			var indexLength = index[ indexName ].items.length,
				subIndex = index[ indexName ].items;
	
			if( typeof subIndex[0] === 'object' ) {
			
				out = new Array().concat( subIndex );
			
			} else {
	
				for( var i = 0; i < indexLength; i++ ) {
				
					out.push( rows[ subIndex[i] ] );
				}							
			}
				
		} else {
		
			for( var i = 0; i < rowLength; i++ ) {
			
				var filtered = condition( rows[i] );
			
				if( typeof filtered === 'object' ) {
					out.push( filtered );
				} else if( filtered ) {
					out.push( rows[i] );
				}	
			}	
		}
	} else if( !condition ) {
		out = new Array().concat( exports.tables[ name  ].rows );
	}
	
	if( typeof sort === 'function') {
		
		out.sort( sort );
	
		return out;
		
	} else {
	
		return out;		
	}
};
	
Cache.prototype._indexHash = function( condition ) {

	if( condition.__ts === undefined ) {
		condition.__ts = crypto.createHash('md5').update( condition.toString() ).digest('hex');	
	}
	
	return condition.__ts;	
};

Cache.prototype._insertItem = function( table, item ){

	if( table.key === false ) {

		table.rows.push( item );

		if( table.hasIndex === true ) { 
			this._indexItem( table, item, table.rows.length - 1 );
		}
			
	} else if ( table.key !== false && typeof item === 'object' && table.keys[ item[ table.key ] ] === undefined ) {
	
		table.keys[ item[ table.key ] ] = true;
		table.rows.push( item );			

		if( table.hasIndex === true ) { 
			this._indexItem( table, item, table.rows.length - 1 );
		}
	}
};

Cache.prototype._indexItem = function( table, item, position ) {
		
	var index = table.index,
		indexLength = table.indexLookup.length,
		filtered;

	for( var i = 0; i < indexLength; i++ ) {

		if( typeof filtered === 'object' ) {
		
			index[ table.indexLookup[i] ].items.push( filtered );
			
		} else if( filtered ) {
		
			index[ table.indexLookup[i] ].items.push( position );
		}
	}
};

Cache.prototype.get = function( key ) {
	
	key = crypto.createHash('md5').update(key).digest('hex');

		var entry = exports.cache[key];
		
	if( entry !== undefined ) {
			
	    if ( (new Date).getTime() >= entry.expire ) {
	    
	    	delete exports.cache[ key ];
    		return false;
    		
	    } else {
	    
	    	return entry.value;
	    }
	    
	} else {
	
		return false;
	}
};

Cache.prototype.set = function ( key, value, time ) {

	key = crypto.createHash('md5').update(key).digest('hex');

	var expire = time + (new Date).getTime();
	
	exports.cache[key] = { 
		value: value, 
		expire: expire
	};
	
	if ( typeof time === 'number' ) {
		setTimeout(function() {
			delete exports.cache[ key ];
		}, time );
	}
};

Cache.prototype.flush = function ( key ) {
	key = crypto.createHash('md5').update(key).digest('hex');
	exports.cache = {};
	//exports.tables = {};
};
	
	

module.exports = Cache;


