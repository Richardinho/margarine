var request = require('request');
var _ = require('underscore');
var cache = new ( require('cache') )();

var RegExpNotNumber = /[^0-9]/g;
var RegExpIsNumber = /^[0-9]{1,}$/;
var RegExpWhiteSpace = /[\n\r\t]/g;
var RegExpTagSpace = />[\s]{1,}</g;
var RegExpAdvert = /id=\"advert([0-9]*)\".*?class=\"advertFooter\"/gi;
var RegExpTitle = /advertTitleMain\"[^>]*><a[^>]*>([^<]*)/;
var RegExpSubTitle = /advertTitleSub\"[^>]*>([^<]*)/;
var RegExpDistance = /distanceAmount\"[^>]*>([0-9]*) miles/;
var RegExpMileage = /<li class=\"\">.*?<span class=\"mileage\">([^<]*)</;
var RegExpTransmission = /<li class=\"\">.*?<span class=\"transmission\">([^<]*)</;
var RegExpEngine = /<li class=\"\">.*?<span class=\"engine\">([^<]*)/;
var RegExpFuel = /<li class=\"\">.*?<span class=\"fuel\">([^<]*)/;
var RegExpMedia = /media\?id=([0-9]*)/;
var RegExpPrice = /offerPrice\">.*?Â£([^<]*)</;
var RegExpURL = /\/[classifiedfeaturedlistingad]*\/advert\/([0-9]*)/gi;
var RegExpID = /id=\"advert([0-9]*)/;

// Create used car table in cache
cache.create( 'used', 'id' );

var UsedSearch = function(){

	this._pageDepth = 10;
	this._openConnections = 0;
	this._maxConnections = 10;
	
	this._options = { postcode: "SW176AS", radius: 1500, page: 1 };
	this._searchBaseURL = "http://www.autotrader.co.uk/search/used/cars/";
	this._filterBaseURL = "http://www.autotrader.co.uk/search/options/usedcars/";
	
	this._baseOptions = {
		"Accept-language": "en", 
		"Cookie": "foo=bar",
		"Accept-Encoding": "gzip,deflate,sdch",
		"User-Agent" : "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.6; en-US; rv:1.9.2.4) Gecko/20100611 Firefox/3.6.4"
		,"proxy": "http://proxy.tradermedia.co.uk:8080"
	};
};

UsedSearch.prototype.set = function( options ){

	for( var name in options ) {
	
		if( options.hasOwnProperty( name ) ) {
		
			if( options[name] !== undefined ) {
				this._options[name] = options[name];			
			} else {
				delete this._options[name];		
			}
		}
	}
};

UsedSearch.prototype.options = function( options ){
	return this._options;
};

UsedSearch.prototype.reset = function( ){
	this._options = { postcode: "SW176AS", radius: 1500, page: 1 };		
};

UsedSearch.prototype.searchURL = function( options ){

	var parts = [];

	for( var name in options ) {	
		if( options.hasOwnProperty( name ) ) {
		
			parts.push( name + "/" + escape( options[name] ) );			
		}
	}
		
	return this._searchBaseURL + parts.join("/");
};

UsedSearch.prototype.filterURL = function( options ){

	var parts = [];

	for( var name in options ) {	
		if( options.hasOwnProperty( name ) ) {
		
			parts.push( name + "/" + escape( options[name] ) );			
		}
	}
		
	return this._filterBaseURL + parts.join("/") + ".json";
};

UsedSearch.prototype.cleanFilterSet = function( filterData ){
	
	var out = {};
	
	if( filterData[0] !== undefined ) {
	
		for( var i = 0; i < filterData.length; i++ ) {
		
			out[ filterData[i].value ] = this.cleanFilter( filterData[i] )
		}		
	}
	
	return out;
};


UsedSearch.prototype.cleanFilter = function( filter ){
	return { 
		"name": filter.text, 
		"value": filter.value, 
		"count": ( filter.count ? filter.count : 0 )
	};
};

UsedSearch.prototype.parseFilter = function( json ) {

	var parsedJSON = JSON.parse( json );

	var out = {
		"filter" : {
			"make": this.cleanFilterSet( parsedJSON["make"] ),
			"model": this.cleanFilterSet( parsedJSON["model"] ),
			"radius": this.cleanFilterSet( parsedJSON["radius"] ),
			"fuel-type": this.cleanFilterSet( parsedJSON["fuel-type"] ),
			"maximum-age": this.cleanFilterSet( parsedJSON["maximum-age"] ),
			"price-from": this.cleanFilterSet( parsedJSON["price-from"] ),
			"price-to": this.cleanFilterSet( parsedJSON["price-to"] ),
			"maximum-mileage": this.cleanFilterSet( parsedJSON["maximum-mileage"] ), 
			"body-type": this.cleanFilterSet( parsedJSON["body-type"] ), 
			"transmission": this.cleanFilterSet( parsedJSON["transmission"] ), 
			"engine-size-cars": this.cleanFilterSet( parsedJSON["engine-size-cars"] ), 
			"colour": this.cleanFilterSet( parsedJSON["colour"] ), 
			"seller-type": this.cleanFilterSet( parsedJSON["seller-type"] )
		},
		"valid-postcode": parsedJSON.postcodeValid, 
		"postcode": parsedJSON.formattedPostcode, 
		"count": parsedJSON.usedVehicleResultCount, 
		"radius": parsedJSON.resultsWithinRadius
	};
	
	return out;
};


UsedSearch.prototype.fetchAllFilters = function( callback ) {
	this.fetchFilter( { postcode: "SW176AS", radius: 1500 }, callback );
};

UsedSearch.prototype.getRequestOptions = function( options ) {

	var out = Object.create( this._baseOptions );
	
	for( var name in options ) {
		
		if( options.hasOwnProperty( name ) ) {
		
			if( options[name] !== undefined ) {
			
				out[name] = options[name];			
			} else {
				delete out[name];		
			}
		}
	}
	
	return out;
};

UsedSearch.prototype.parseResult = function( html ) {

	var adverts = html.replace( RegExpWhiteSpace, "" ).replace( RegExpTagSpace, "><" ).match( RegExpAdvert ),
		out = [];
	
	for( var i = 0; i < adverts.length; i++ ) {
		out.push( this.parseAdvert( adverts[i] ) );
	}
	
	var page = html.match( /<span class="current">([0-9]{1,})<\/span>/ )[1];
	var pageTotal = html.match( /<span class="totalPages">([0-9]{1,})<\/span>/ )[1];

	return { result: out, pages: parseInt( pageTotal, 10 ), current: parseInt( page, 10 ) };
};

UsedSearch.prototype.cleanAdvert = function( out ) {

	for( var name in out ) {
		
		if( out.hasOwnProperty( name ) ) {
			
			if( out[name] === null ) {
			
				delete out[name];
				
			} else {
			
				if( out[name][1] ) {
					out[name] = out[name][1];				
				}
				
				if( out[name].match( RegExpIsNumber ) ) {
					out[name] = parseInt( out[name], 10 );
				}
			}
		}
	}
	
	if( out.url ) {
		out.url = "http://www.autotrader.co.uk/classified/advert" + out.url;	
	}
	
	if( out.image ) {
		out.image = "http://pictures2.autotrader.co.uk/imgser-uk/servlet/media?id=" + out.image + "&width=164&height=124"
	}
	
	if( out.mileage ) {
		out.miles = parseInt( out.mileage.toString().replace( RegExpNotNumber, "" ), 10 );
	}

	if( out.price ) {
		out.pounds = parseInt( out.price.toString().replace( RegExpNotNumber, "" ), 10 );
	}
		
	return out;
	
};

UsedSearch.prototype.parseAdvert = function( html ) {

	var out = {};

	out.title = html.match( RegExpTitle );
	out.subtitle = html.match( RegExpSubTitle );
	out.distance = html.match( RegExpDistance );
	out.mileage = html.match( RegExpMileage );
	out.transmission = html.match( RegExpTransmission );
	out.engine = html.match( RegExpEngine );
	out.fuel = html.match( RegExpFuel );
	out.imageid = html.match( RegExpMedia );
	out.image = out.imageid;
	out.price = html.match( RegExpPrice );
	out.url = html.match( RegExpURL );
	out.id = html.match( RegExpID );
		
	return this.cleanAdvert( out );
};

UsedSearch.prototype.fetchFilter = function( options, callback ) {

	var self = this;
		
	this.batch( this.filterURL( options ), function( response ){
		callback( self.parseFilter( response ) );
	} );
};

UsedSearch.prototype.mergeResult = function( first, last ) {

	var out = {};
	
	out.result = first.result.concat( last.result );	
	out.pages = last.pages;
	out.current = last.current;
	
	return out								
};

UsedSearch.prototype.parseBatch = function( batch ) {

	var out = { result:[], current:0, pages: 0 },
		batchLength = batch.length;

	batch = _.sortBy( batch, function( resultOne,  resultTwo ){
		return resultOne.current;
	});
	
	var startPage = batch[0].current;
	var stopPage = batch[batch.length - 1].current;
	
	for( var i = 0; i < batchLength; i++ ) {
		out = this.mergeResult( out, batch[i] );
	}
	
	delete out.current;
	
	out.start = startPage;
	out.stop = stopPage;
	out.results = out.result.length;
	
	// Add results to cache
	for( var i = 0; i < out.result.length; i++ ) {
		cache.insert( 'used', out.result[i] );
	}
	
	return out;
};

UsedSearch.prototype.batch = function( url, callback ) {

	var self = this;

	if( this._openConnections < this._maxConnections ) {
	
		this._openConnections++;

		request( this.getRequestOptions( { url: url } ), function (error, response, body) {
			
			if (!error && response.statusCode == 200) {
				callback( body );
			} else {
				callback( false );
			}		
			self._openConnections--;
		});
		
	} else {
	
		setTimeout( function(){
			self.batch( url, callback )
		}, 250 );
	}
};


UsedSearch.prototype.fetch = function( options, callback, pageDepth ){

	var self = this,
		result = [],
		batchCount = 0;
	
	if( pageDepth !== undefined && pageDepth > this._pageDepth ) {
		pageDepth = this._pageDepth;
	} else if( pageDepth === undefined ) {
		pageDepth = 1;
	}
	
	this.batch( this.searchURL( options ), function( data ){
	
		result.push( self.parseResult( data ) );

		if( pageDepth > 1 ) {

			for( var i = 2; i <= result[0].pages && i <= pageDepth; i++ ) {
				
				var newOptions = new Object( options );			
				newOptions.page = i;

				self.batch( self.searchURL( newOptions ), function( data ){
												
					result.push( self.parseResult( data ) );					
					batchCount++;
										
					if( batchCount === pageDepth || batchCount === result[result.length - 1].pages ) {
						callback( self.parseBatch( result ) );
					}
				} );
			}
		}
		
		batchCount++;
		
		if( batchCount === pageDepth || batchCount === result[ result.length -1].pages ) {
			callback( self.parseBatch( result ) );
		}
	});

};

module.exports = UsedSearch;